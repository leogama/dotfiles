# ~/.config/R/profile: sourced by R (but not Rscript).

# Detect execution environment.
.RUNTIME <- list()

.RUNTIME$JUPYTER <- 'IRkernel::main()' %in% commandArgs()
.RUNTIME$RPY2 <- basename(commandArgs()[1]) == 'rpy2'
.RUNTIME$RSTUDIO <- basename(commandArgs()[1]) == 'RStudio'
stopifnot(sum(unlist(.RUNTIME)) <= 1)  # at most one can be true

.RUNTIME$INTERACTIVE <- (interactive() && !.RUNTIME$RPY2) || .RUNTIME$JUPYTER


if (.RUNTIME$INTERACTIVE) {

    ### Options ###

    # TODO: Use install.packages's "Ncpus" or make's "MAKE=make -j" â€•or both?
    # Compare number of parallel package installations vs. number of jobs per
    # make invocation (i.e. per package)...
    options(
        Ncpus = Sys.getenv('NCPUS', unset = parallel::detectCores()),  # install.packages
        menu.graphics = FALSE,
        repos = c(CRAN = 'https://www.vps.fmvz.usp.br/CRAN'),
        stringsAsFactors = FALSE  # the default in R 4.0
    )
    utils::rc.settings(ipck = TRUE)  # tab-complete package names in library()

    # Display options.
    options(
        digits = 4,
        #help_type = if (Sys.getenv('SSH_CLIENT') != '') 'text' else 'html',
        prompt = 'R > ', continue = '... ',
        scipen = 2,  # controls exponential notation printing
        show.signif.stars = FALSE  # for summary tables
    )


    ### Default packages ###

    local({
        pkgs <- c(
            'datawizard',   # data transformations
            'dplyr',        # idem
            'tibble',       # idem
            'tidyr',        # idem
            'purrr',        # functional programming, 'partial()'
            'stringr',      # consistent string manipulation, includes str_glue()
            #'rlang',        # utilities to write better functions
            'withr',        # temporarily modify the environment
            'magrittr'      # pipe-friendly, last because masks tidyr::extract()
            #TODO: 'leogama'
        )

        pkgs <- setdiff(pkgs, getOption('defaultPackagesIgnore', default = c()))
        pkgs <- pkgs[sapply(pkgs, requireNamespace, quietly = TRUE)]
        options(defaultPackages = union(getOption('defaultPackages'), pkgs))

        # Welcome message.
        cat(R.version.string)
        if (!is.null(venv <- Sys.getenv('VIRTUAL_ENV_PROMPT'))) {
            cat(" [venv: ", gsub(' *(^\\(|\\) *$)', '', venv), "]", sep = "")
        }
        cat("\n")
        #cat(" [help: ", getOption('help_type'), "]", sep = "")
        cat(sprintf("Loaded: %s\n", paste(sort(pkgs), collapse = ", ")))
        if (requireNamespace('fortunes', quietly = TRUE)) {
            print(fortunes::fortune())
        } else {
            cat("\n~ install 'fortunes' if you like fun ~\n\n")
        }

        # Colored R console:
        # R > remotes::install_github('jalvesaq/colorout', remotes::github_release())
        if (!.RUNTIME$RSTUDIO) try(library(colorout))

        #FIXME: Collection of personal utility functions.
        utils_path <- file.path(Sys.getenv('XDG_USER_LIB'), 'utils.R')
        utils_env <- attach(NULL, name = 'tools:leogama')
        try(sys.source(utils_path, utils_env))
    })


    ### Workspace image ###

    .First <- function() {

        ws <- new.env(parent = emptyenv())
        ws$dir <- file.path(Sys.getenv('XDG_STATE_HOME', '~/.local/state'), 'R')
        ws$file <- file.path(ws$dir, 'workspace.RData')

        ws$file <- '.RData'  #TODO: remove after fixing problem below

        if (file.exists(ws$file)) {
            cat("Load workspace image? [y/N] ")
            if (tolower(readChar('stdin', 1L)) == 'y') {
                load(ws$file, envir = .GlobalEnv, verbose = TRUE)
            }
        }

        #FIXME: doesn't work (race condition? use safe=TRUE?)
        #reg.finalizer(onexit = TRUE, e = ws, f = function(e) {
        #    if (file.exists('.RData')) {
        #        dir.create(ws$dir, showWarnings = FALSE, recursive = TRUE)
        #        file.rename(from = '.RData', to = ws$file)
        #    }
        #})

        #TODO: remove itself from global env?
    }

    #if (!.RUNTIME$JUPYTER) {
    #    loadhistory(HISTORY_FILE)
    #    timestamp(prefix = paste0('##------ [', getwd(), '] '), quiet = TRUE)
    #}

    #if (!.RUNTIME$JUPYTER) {
    #    Sys.setenv(R_HISTSIZE = '10000')
    #    savehistory(HISTORY_FILE)
    #}
}

# vim: set ft=r :
