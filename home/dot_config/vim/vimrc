" vimrc: sourced by Vim on startup

""" HEAD """

set encoding=utf-8
scriptencoding utf-8

" Ensures that various options are properly set to work
" with the Vim-related packages available in Debian.
runtime debian.vim

" Source a global configuration file if available.
if filereadable('/etc/vim/vimrc.local')
    source /etc/vim/vimrc.local
endif

" Set (once) the location of Vim directories and state files.
if !exists('g:did_xdg_setup')
    set runtimepath^=$XDG_CONFIG_HOME/vim
    set runtimepath+=$XDG_DATA_HOME/vim
    set runtimepath+=$XDG_CONFIG_HOME/vim/after

    set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
    set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

    call mkdir($XDG_DATA_HOME.'/vim/spell', 'p')
    set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
    set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
    set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
    set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

    if !has('nvim')
        set viminfofile=$XDG_STATE_HOME/vim/viminfo
    endif

    let g:netrw_home = expand('$XDG_DATA_HOME/vim')
    let g:plug_home = expand('$XDG_DATA_HOME/vim/plugged')
endif
let g:did_xdg_setup = 1

""" OPTIONS """

" Appearance
set t_Co=256                        " force (at least) 256 colors
sil! set termguicolors              " try to set true colors
set cursorline                      " highlight the text line of the cursor
sil! set cursorlineopt=line         " don't highlight line number
set laststatus=2                    " always show status line
set list listchars=precedes:Â«,extends:Â»,tab:>â€•
set number relativenumber
set showcmd                         " show incomplete commands in the status line
set showmatch                       " highlight matching brackets
set noshowmode                      " showmode is unnecessary with lightline
set showtabline=2                   " always show the tab bar

" Modify codeschool colorscheme when it's (re)loaded.
fun PatchCodeschool()
    highlight ColorColumn ctermbg=238
    highlight FoldColumn ctermbg=NONE guibg=NONE
endfun
augroup PatchCodeschoolGroup
    autocmd!
    autocmd! ColorScheme codeschool  :call PatchCodeschool()
augroup END

" Indentation
set expandtab
set shiftround                      " round the indent to a multiple of 'shiftwidth'
set shiftwidth=0                    " make 'shiftwidth' follow 'tabstop'
set softtabstop=-1                  " make 'softtabstop' follow 'shiftwidth'
set tabstop=4

" Text wrapping and formatting
let textwidth_code = 80
let textwidth_comment = 72
let &textwidth = textwidth_code
set colorcolumn=+2                  " highlight second column after 'textwidth'
set linebreak nowrap                " break line at spaces when wrap is set
set formatoptions+=rlj

" Clipboard
set clipboard+=unnamed,unnamedplus

" Miscelanous
set autowrite                       " automatically save before commands like :next and :make
set backspace=indent,eol,start      " backspace works as expected
"set hidden                         " don't unload buffers when they are abandoned
set nohlsearch                      " can be toggled later
set ignorecase incsearch smartcase  " search matching
set lazyredraw                      " don't redraw screen during macros execution and the like
"set nomagic                        " all regexp operators preceded with \
set modeline modelines=5            " number of lines to look at begin/end of file (overwrites debian.vim)
sil! set modelineexpr               " allow modeline expressions, such as for defining custom folding (version >= 8.1.1365)
set scrolloff=1                     " minimum number of lines to show before/after the cursor line
set sessionoptions=blank,folds,tabpages
set sidescroll=30                   " how many characters should the terminal be scrolled horizontally
set splitbelow splitright           " default window splitting behaviour
set ttimeout ttimeoutlen=0          " remove delay when returning to normal mode
set viewoptions-=options            " do not save buffer options, mappings, etc. with :mkview
set virtualedit=block               " allow selection beyond end of the line in Visual block mode
set visualbell
set t_vb=[?5h$<50>[?5l          " 50 ms visual bell (default is 200!)
let asmsyntax = 'nasm'              " default filetype for .asm extensions
let tex_flavor = 'latex'            " default filetype for .tex extensions

" Netrw
let netrw_preview = 1   " vertical split

""" GUI OPTIONS """
set guifont=Fira\ Code\ Medium\ 10

""" MAPPINNGS """

" Lowercase key pairs unmapped by default:
"
" B  C  D  L  M  O  P  Q  R  S  U  V  X  Y  Z
" --------------------------------------------
"       cd    cm co cp cq cr cs cu cv cx cy cz
"    dc       dm       dq dr ds du dv dx dy dz
" gb gc    gl                gs          gy
"    vc vd    vm vo vp vq vr vs vu vv vx vy vz
"    yc yd    ym yo yp yq yr ys yu yv yx    yz
"                   zp zq                   zy

" sane prefixes
map ; :
tmap <C-w>; <C-w>:
map <Space> <Leader>

" disable default mappings
map qq <Nop>

" easier move keys for Dvorak
"   left: <s> alone is pretty useless (use <c>)
map l <Nop>
noremap s l
"   up and down: in the left home row
map k <Nop>
noremap o k
map j <Nop>
noremap u j

" remaps related to move keys
noremap k <C-r>
noremap j u
noremap <Enter> o

" window navigation in tmux
noremap <silent> <C-u>  :<C-u>TmuxNavigateDown<CR>
noremap <silent> <C-o>  :<C-u>TmuxNavigateUp<CR>
noremap <silent> <C-h>  :<C-u>TmuxNavigateLeft<CR>
noremap <silent> <C-s>  :<C-u>TmuxNavigateRight<CR>

" guarantee window navigation outside tmux
map <M-o> <C-o>
map <M-u> <C-u>
map <M-h> <C-h>
map <M-s> <C-s>

" terminal navigation
tnoremap <C-o> <C-w><C-k>
tnoremap <C-u> <C-w><C-j>
tnoremap <C-h> <C-w><C-h>
tnoremap <C-s> <C-w><C-l>

" move current line up or down
noremap <Leader>u ddp
noremap <Leader>o ddkP

" easier to reach begin/end of line
noremap <C-a> ^
nnoremap <C-e> $
vnoremap $ $h
inoremap <C-h> <Left>
inoremap <C-s> <Right>

" go to opening bracket not in the first column
noremap <silent> [[  m':call search('{\(\n\<bar> \)', 'bW')<CR>w99[{
noremap <silent> ]]  m'j0[[%:call search('{\(\n\<bar> \)', 'W')<CR>

" set word to uppercase / toggle case
nnoremap cu     g~iw
"imap <C-u> <Esc>gUiwea

fun InsideComment()
    let C = col('.')
    let L = line('.')
    call cursor(L, 1)
    call search('\S', 'c', L)
    let syn_element = synID(L, col('.'), v:true)->synIDtrans()->synIDattr('name')
    call cursor(L, C)
    return syn_element =~? 'comment'
endfun

" format paragraph
fun FormatParagraph()
    let &textwidth = InsideComment() ? b:textwidth_comment : b:textwidth_code
    normal! gvgw
    let &textwidth = b:textwidth_code
endfun
vmap <silent> gw                :call FormatParagraph()<CR>
nmap          gww               {gq}gE

" window commands
map <silent> <C-w>N :vnew<CR>

" command hotkeys (the first one should be harmless if triggered by accident)
nmap          <Leader><Space>   :set hlsearch! hlsearch?<CR>
nmap <silent> <Leader>/         :Lexplore<CR>
nmap <silent> <Leader>p         :set paste!<CR>
nmap <silent> <Leader>rc        :call EditVimrc()<CR>
nmap <silent> <Leader>so        :source $MYVIMRC <bar> :if has('gui_running') <bar> :sil! source $MYGVIMRC <bar> :endif<CR>
nmap          <Leader>a         :ALEToggleBuffer<CR>

fun EditVimrc()
    tabedit $MYVIMRC
    if filewritable(expand('$XDG_CONFIG_HOME/local/vimrc'))
        vsplit $XDG_CONFIG_HOME/local/vimrc
        wincmd p
    endif
endfun

" Split sentences of paragraphs in separated lines.
nmap <silent> <Leader>w Vipk:s/\n/ / <bar> :s/ \+/ /g <bar> s/\. /.\r/g<CR>

""" COMMAND ABBREVIATIONS """

cabbrev h vertical help
cabbrev v verbose

""" CUSTOM COMMANDS """

command -bang Snip                  :UltiSnipsEdit<bang>

" From https://vim.fandom.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
command HighlightGroups             :echo "hi<"    .. synIDattr(           synID(line('.'), col('.'), 1),  'name') ..
\                                       "> trans<" .. synIDattr(           synID(line('.'), col('.'), 0),  'name') ..
\                                       "> lo<"    .. synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name') .. ">"

command -range -bang Sort {
    if <range> > 1
        execute 'normal' 'gvJ'
    endif
    execute 'normal' '^D'
    var words = split(getreg('"'), ', *')
    if !empty(<q-bang>)
        const prefix = '^[rR]\?[bf]\?'
                       .. '\(["' .. "'" .. ']\?\)'
                       .. '_*'
        const suffix = '\1$'
        const re_consts = prefix
                          .. '[[:upper:]][[:upper:][:digit:]_]*'
                          .. suffix
        const re_types = prefix
                         .. '[[:upper:]][[:alnum:]]\{-}[[:lower:]][[:alnum:]]*'
                         .. suffix
        const re_excs = '\(Error\|Exception\|Warning\)["' .. "'" .. ']\?$'
        var consts = filter(copy(words), 'v:val =~# re_consts')
        var types = filter(copy(words), 'v:val =~# re_types')
        var excs = filter(copy(types), 'v:val =~# re_excs')
        var vars = filter(words, 'v:val !~# re_consts && v:val !~# re_types')
        types = filter(types, 'v:val !~# re_excs')
        words = sort(types) + sort(vars) + sort(consts) + sort(excs)
    else
        words = sort(words)
    endif
    setline('.', getline('.') .. join(words, ', ') .. ',')
    execute 'normal' 'gwgw'
}

function! Exec(cmd)
    redir @a
    exec printf('silent %s',a:cmd)
    redir END
    tabnew
    norm "ap
endfunction

""" AUTOCOMMANDS """
augroup CommentTextwidth
    autocmd!
    autocmd BufEnter                    *  :call SetDefaultTextWidth()
    autocmd InsertEnter,CursorMovedI    *  :call AdjustTextWidth('enter')
    autocmd InsertLeave                 *  :call AdjustTextWidth('leave')
augroup END
fun SetDefaultTextWidth()
    if !exists('b:textwidth_code')
        let b:textwidth_code = g:textwidth_code
    endif
    if !exists('b:textwidth_comment')
        let b:textwidth_comment = g:textwidth_comment
    endif
endfun
fun AdjustTextWidth(event)
    if &textwidth == 0
        return
    elseif a:event == 'enter'
        let &textwidth = InsideComment() ? b:textwidth_comment : b:textwidth_code
    elseif a:event == 'leave'
        let &textwidth = b:textwidth_code
    endif
endfun

augroup DiffOptions
    autocmd!
    autocmd OptionSet  diff  :call ToggleDiffColors()
augroup END
fun ToggleDiffColors()
    if &diff
        let g:old_colorscheme = g:colors_name
        let g:old_colorcolumn = &colorcolumn
        colorscheme codeschool
        sil! call lightline#highlight()  " fail at vimdiff startup
        setlocal colorcolumn&
    else
        sil! execute "colorscheme" g:old_colorscheme
        call lightline#highlight()
        sil! let &colorcolumn = g:old_colorcolumn
    endif
endfun

augroup TimeStamping
    autocmd!
    autocmd BufWritePre  *  :mark s | :call UpdateTimestamp() | :'s
augroup END
sil! scriptversion 1  " allow use of '.' for concatenation
fun UpdateTimestamp()
    let pattern = 'Updated:  '
    call cursor(1, 1)
    let lnum = search(pattern, 'cnW', 100)
    let oldline = getline(lnum)
    let newline = substitute(oldline, pattern . '\zs.*', strftime('%d-%m-%Y'), '')
    if newline !=# oldline
        call setline(lnum, newline)
    endif
endfun
sil! scriptversion 4

""" PLUGINS """

try
    call plug#begin()
catch /E117:/  " Unknown function
    finish
endtry

Plug 'antlypls/vim-colors-codeschool'
Plug 'ustasb/gruvbox'
Plug 'lifepillar/vim-solarized8', {'tag': '*'}

Plug 'chrisbra/csv.vim', {'for': 'csv'}  " script_id=2830
Plug 'chrisbra/Recover.vim'  " script_id=3068
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdcommenter', {'tag': '*'}  " script_id=1218
Plug 'cespare/vim-toml'     " TOML (INI-like) filetype and syntax
Plug 'whiteinge/diffconflicts', {'tag': '*'}

" <Tab> completion
Plug 'ervandew/supertab'  " script_id=1643
if has('python3')
    Plug 'honza/vim-snippets'  " script_id=1849
    Plug 'leogama/ultisnips', {'branch': 'patch-normalize-path'}  " script_id=2715
    Plug 'python-mode/python-mode', {'for': 'python', 'branch': 'develop'}
endif

" Quotes and brackets
Plug 'AshinGau/HTML-AutoCloseTag', {'for': ['html', 'rmd']}  " script_id=2591
Plug 'beloglazov/vim-textobj-quotes'
Plug 'Julian/vim-textobj-brace'
Plug 'kana/vim-textobj-user'
Plug 'somini/vim-autoclose'
Plug 'tpope/vim-surround', {'tag': '*'}  " script_id=1697

" Panels
Plug 'ptzz/lf.vim', {'tag': '*'}
if executable('ctags')
    Plug 'majutsushi/tagbar', {'tag': '*'}  " script_id=3465
    Plug 'chumakd/vim-taglist-plus'  " script_id=273
endif

" Focus mode
"Plug 'subnut/vim-iawriter'
Plug 'leogama/vim-iawriter'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'reedes/vim-colors-pencil'

" External programs integration
Plug 'dense-analysis/ale', {'tag': '*'}     " linters integration
Plug 'prabirshrestha/vim-lsp', {'tag': '*'} " Language Server Protocol implementation
Plug 'mattn/vim-lsp-settings'               " auto configuration for vim-lsp
Plug 'rhysd/vim-lsp-ale'                    " ALE/Vim-LSP integration

Plug 'christoomey/vim-tmux-navigator'   " mappings for even outside of tmux
if $TMUX != ''  "executable('tmux')
    Plug 'ervandew/screen'  " script_id=2711
endif

if executable('lualatex') || executable('pdflatex')
    Plug 'lervag/vimtex', {'for': 'tex', 'tag': '*'}
endif

if executable('jupyter') && has('python3')
    Plug 'jupyter-vim/jupyter-vim', {'for': 'python'}
endif

if executable('R') && has('unix') && !has('win32unix')
    Plug 'jalvesaq/Nvim-R', {'for': ['r', 'rmd']} ", 'branch': 'stable'}  # script_id=2628
    Plug 'vim-pandoc/vim-pandoc' ", {'for': ['md', 'rmd']}
    Plug 'vim-pandoc/vim-pandoc-syntax' ", {'for': ['md', 'rmd']}
    "Plug 'vim-pandoc/vim-rmarkdown', {'for': ['rmd']}
endif

if exists('g:plug_install_only')
    PlugUpdate
    finish
endif

call plug#end()  " executes 'filetype plugin indent on' and 'syntax enable'

" Set colorscheme
let bu_ignore_capitalization = 0  " bug: https://github.com/ustasb/gruvbox/commit/27080f0
colorscheme gruvbox
if &diff && !exists('g:old_colorscheme')
    call ToggleDiffColors()
endif

""" PLUGINS OPTIONS """
let AutoCloseExpandSpace = 0
let lsp_settings_enable_suggestions = 0
let NERDDefaultAlign = 'left'
let SuperTabCompleteCase = 'match'
let SuperTabDefaultCompletionType = 'context'
let tagbar_width = 30
let tagbar_status_func = 'TagbarStatusFunc'
let UltiSnipsListSnippets = '<C-t>'
let UltiSnipsJumpForwardTrigger = '<C-h>'
let UltiSnipsJumpBackwardTrigger = '<C-l>'
let UltiSnipsEditSplit = 'context'
"let lsp_ale_auto_enable_linter = v:false

""" LIGHTLINE """

" Whether we have Fira Code font.
let s:firacode = has('gui_running')
\             || $LC_FONT ==# 'FiraCode'
\             || has('macunix') && $TERM_PROGRAM ==# 'iTerm.app'
\             || has('unix')
\             || has('win32unix')
let s:firacode = s:firacode && $LC_FONT !=# 'NoPowerline'

let lightline = {
\   'colorscheme': 'jellybeans',
\   'tabline': {
\       'right': [ ['user', 'clock', 'calendar'] ]
\   },
\   'component': {
\       'calendar': '%{strftime("%a %d %b")}',
\       'clock': '%{strftime("%H:%M")}',
\       'user': '%{g:lightline_user_component}',
\   },
\   'component_function': {
\       'percent': 'LightlineProgressbar',
\       'readonly': 'LightlineReadonly',
\   },
\   'separator': {
\       'left': (s:firacode ? "\uE0B0" : 'â–¶'),
\       'right': (s:firacode ? "\uE0B2" : 'â—€')
\   },
\   'subseparator': {
\       'left': '',
\       'right': (s:firacode ? "\uE0B3" : '|')
\   },
\}

" for latexrun icon, etc.
let lightline_user_component = ''

fun TagbarStatusFunc(current, sort, fname, ...) abort
    return lightline#statusline(0)
endfun

fun LightlineProgressbar()
    const bar = [" ", "\u2581", "\u2582", "\u2583", "\u2584", "\u2585", "\u2586", "\u2587"]
    let percent = 100 * line('.') / line('$')
    let progress = 8 * (line('.') - 1) / line('$')
    return printf('%s%3d%%', bar[progress], percent)
endfun

fun LightlineReadonly()
    return &filetype =~? 'help' || !&readonly ? '' : s:firacode ? "\uE0A2" : 'ðŸ”’'
endfun

fun UpdateClock(timer)
    redrawtabline
endfun
let timer = timer_start(60000, 'UpdateClock', {'repeat': -1})

""" PANELS """

noremap <silent> <leader>, :TagbarToggle<CR>
let tagbar_position = 'topleft vertical'
let tagbar_type_r = {
\   'ctagstype' : 'r',
\   'kinds'     : [
\       'f:functions',
\       'g:variables',
\       'v:function variables',
\   ]
\}

nnoremap <silent> <leader>. :TlistToggle<CR>
let Tlist_Enable_Fold_Column = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Sort_Type = 'name'
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth = 40
let tlist_r_settings = 'r;f:functions;g:variables'

""" TERMINAL """

"" Virtual terminal version ""

" Create REPL terminal relative to current tab.
command -nargs=1 Term       :let t:repl_buf = term_start('<args>', {'term_finish': 'close'}) | :wincmd p

" Send line to REPL. Note the CR escaping: '\' is for the terminal and '<lt>' is for the mapping.
nmap <silent> <Leader>d     :call term_sendkeys(t:repl_buf, getline('.') .. "\<lt>CR>")<CR>j^
"imap <silent> <C-Enter>     <Esc><C-Enter>

nmap <silent> <Leader>l     :call term_sendkeys(t:repl_buf, "\<lt>C-l>")<CR>

"" Tmux version ""

if $TMUX != ''
    let ScreenImpl = 'Tmux'
    let ScreenIPython3 = 1

    " Control terminal
    noremap <Leader>L       :call g:ScreenShellSend('!clear')<CR>
    noremap <Leader>qq      :ScreenQuit<CR>

    " Send code
    noremap <Leader><CR>    :call g:ScreenShellSend("\r")<CR>
    "noremap <Leader>l       V:ScreenSend<CR>
    noremap <Leader>d       V:ScreenSend<CR>j
    noremap <Leader>b       V}:ScreenSend<CR>})
    vnoremap <Leader>v      :ScreenSend<CR>'>j
endif

""" EXPERIMENTAL """

set path+=**
set wildmenu

""" TAIL """

" Source a local configuration file if available
if filereadable(expand('$MYVIMRC.local'))
    source $MYVIMRC.local
endif

" fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='
" vi:set tw=100 fen fdc=2 fdm=expr fde=getline(v\:lnum)=~'^"""'?'>1'\:'=' :
